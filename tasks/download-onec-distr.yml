---
# Проверить существование архива
- name: Check if dist already downloaded
  stat:
    path: "{{ onec_dist_storage }}\
        /{{ platform }}64_{{ onec_version_major }}_\
        {{ onec_version_minor }}_{{ onec_version_release }}_\
        {{ onec_version_patch }}.tar.gz"
  register: __onec_dist_exists

# Создать каталог для хранения распакованного архива дистрибутива
- name: Create unarchive dist storage location
  file:
    state: directory
    path: "{{ onec_dist_storage }}/{{ onec_version }}"

# Получить дистрибутив если его нет
- name: Download onec dist
  when: not __onec_dist_exists.stat.exists
  #   ignore_errors: True
  #   with_items: "{{ onec_mirrors }}"
  get_url:
    url: "{{ onec_version_specific[onec_version].urls[platform] }}"
    checksum: "{{ onec_version_specific[onec_version].checksums[platform] }}"
    dest: "{{ onec_dist_storage }}/\
        {{ platform }}64_{{ onec_version_major }}_\
        {{ onec_version_minor }}_{{ onec_version_release }}_\
        {{ onec_version_patch }}.tar.gz"

# Распаковать архив
- name: Unarchive dist
  unarchive:
    remote_src: yes
    src: "{{ onec_dist_storage }}/{{ platform }}64_{{ onec_version_major }}_{{ onec_version_minor }}_{{ onec_version_release }}_{{ onec_version_patch }}.tar.gz"
    dest: "{{ onec_dist_storage }}/{{ onec_version }}"
    keep_newer: yes

# Получить в переменную список пакетов для установки
- name: Find packadge files in "{{ onec_dist_storage }}/{{ onec_version }}"
  find:
    paths: "{{ onec_dist_storage }}/{{ onec_version }}"
    pattern: "1C*.rpm,1c*.deb"
  register: pkg_files

# - debug:
#     var: pkg_files

# Получить в переменную список путей к пакетам для инсталляции
- name: Set path to packadge
  set_fact:
    pkg_list: "{{ pkg_files.files | map(attribute='path') | list }}"
